#!/bin/bash
#
# Copyright (c) 2009, Regents of the University of Colorado.
#
# Written by Andrew Jenkins, based on loopbacktest.sh by David Young
#
echo "Looking for acsadmin"
source ../setacs.sh

which acsadmin
if [[ "$ACS" == "found" ]] ; then
	CONFIGFILES=" \
	${CONFIGSROOT}/loopback-udp/loopback-acs.rc \
	"
else
	CONFIGFILES=" \
	${CONFIGSROOT}/loopback-udp/loopback.rc \
	"
fi
echo "########################################"
echo
pwd | sed "s/\/.*\///" | xargs echo "NAME: "
echo
echo "PURPOSE: Ping-pongs bundles with custody transfer from one BP endpoint
	to another over UDP."
echo
echo "CONFIG: Standard loopback-udp: "
echo
for N in $CONFIGFILES
do
	echo "$N:"
	cat $N
	echo "# EOF"
	echo
done
echo "OUTPUT: Terminal messages will determine if the required number of
	bundles were sent and received."
echo
echo "########################################"

# Ping pongs bundles with custody transfer from one BP endpoint to another
# over UDP. Runs a number of times (second argument; default 5)

if [ -z $2 ]; then
    ITERATIONGOAL=5
else
    ITERATIONGOAL=$2
fi

# Try 10 times to see if the bundle has been received.
tryreceive () {
    X=0

    while [ $X -lt 200 ]
    do
        # sleep and kill process in case it didn't end properly
        sleep 0.04

	# check if the message from this iteration cna be found within the reception file yet
        if ! grep "${1}"  $IONRECEIVEFILE >/dev/null 2>/dev/null;
	then
            X=$((X + 1))
        else
            # We received it.  Hooray.
            return 0
        fi
    done
    # We didn't receive it, even after 10 tries; bummer.
    echo "Message '${1}' not  received within 10 seconds"
    return 1
}


# message sent over ion
IONMESSAGE="iontestmessage"
IONSENDFILE=./ionsendfile.txt
IONRECEIVEFILE=./ionreceivefile.txt

echo "Killing old ION..."
killm
sleep 1

# Prepare for loop start
rm -f $IONSENDFILE $IONRECEIVEFILE ion.log
PASS=1
ITERATION=1

echo "Starting ION..."
srcdir=`pwd`
CONFIGDIR="${CONFIGSROOT}/loopback-udp"
if [[ "$ACS" == "found" ]] ; then
	echo "ionstart -I ${CONFIGDIR}/loopback-acs.rc"
	"ionstart" -I "${CONFIGDIR}/loopback-acs.rc"
else
	echo "ionstart -I ${CONFIGDIR}/loopback.rc"
	"ionstart" -I "${CONFIGDIR}/loopback.rc"
fi

# Start the listener that will receive all the bundles.
echo "Starting Message Listener..."
bpsink ipn:1.1 > $IONRECEIVEFILE &
BPSINKPID=$!

# give bpsink some time to start up
sleep 5

while [ $PASS -eq 1 ] && [ $ITERATION -le $ITERATIONGOAL ]
do
    # add iteration number to the date for the message, that way we dont risk an iteration using the same message as the previous when the iteration took less than a second.
    IONMESSAGE="$(date)|ITERATION NUMBER ${ITERATION}"

    # send the message in the file via test bundle source
    bptrace ipn:1.2 ipn:1.1 ipn:1.2 60 1.0 "$IONMESSAGE" 31

    if tryreceive "$IONMESSAGE";
    then
        echo -n "."
        if [ $((ITERATION % 80)) -eq 0 ]
        then
            echo $ITERATION
        fi
        ITERATION=$((ITERATION + 1))
    else
        PASS=0
        echo "FAILED on ITERATION $ITERATION at `date`."
    fi
done

echo

# bpsink does not self-terminate, so send it SIGINT
echo "Stopping bpsink"
kill -2 $BPSINKPID >/dev/null 2>&1
sleep 1
kill -9 $BPSINKPID >/dev/null 2>&1

# shut down ion processes
echo "Stopping ion..."
ionstop

if [ $ITERATION -eq $((ITERATIONGOAL + 1)) ]
then
    echo Completed $((ITERATION - 1)) iterations successfully
    exit 0
else
    exit 1
fi
