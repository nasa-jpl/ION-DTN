=head1 NAME

bpclock - Bundle Protocol (BP) daemon task for managing scheduled events

=head1 SYNOPSIS

B<bpclock>

=head1 DESCRIPTION

B<bpclock> is a background "daemon" task that periodically performs
scheduled Bundle Protocol activities.  It is spawned automatically by
B<bpadmin> in response to the 's' command that starts operation of Bundle
Protocol on the local ION node, and it is terminated by B<bpadmin> in
response to an 'x' (STOP) command.

Once per second, B<bpclock> takes the following action:

=over 4

First it (a) destroys all bundles whose TTLs have expired, (b) enqueues
for re-forwarding all bundles that were expected to have been transmitted
(by convergence-layer output tasks) by now but are still stuck in their
assigned transmission queues, and (c) enqueues for re-forwarding all
bundles for which custody has not yet been taken that were expected to
have been received and acknowledged by now (as noted by invocation of
the bpMemo() function by some convergence-layer adapter that had CL-specific
insight into the appropriate interval to wait for custody acceptance).

Then B<bpclock> adjusts the transmission and reception "throttles" that
control rates of LTP transmission to and reception from neighboring nodes,
in response to data rate changes as noted in the RFX database by B<rfxclock>.

B<bpclock> then checks for bundle origination activity that has been blocked
due to insufficient allocated space for BP traffic in the ION data store: if
space for bundle origination is now available, B<bpclock> gives the bundle
production throttle semaphore to unblock that activity.

Finally, B<bpclock> applies rate control to all convergence-layer protocol
inducts and outducts:

=over 4

For each induct, B<bpclock> increases the current capacity of the duct
by the applicable nominal data reception rate.  If the revised current
capacity is greater than zero, B<bpclock> gives the throttle's semaphore
to unblock data acquisition (which correspondingly reduces the current
capacity of the duct) by the associated convergence layer input task.

For each outduct, B<bpclock> increases the current capacity of the duct
by the applicable nominal data transmission rate.  If the revised current
capacity is greater than zero, B<bpclock> gives the throttle's semaphore
to unblock data transmission (which correspondingly reduces the current
capacity of the duct) by the associated convergence layer output task.

=back

=back

=head1 EXIT STATUS

=over 4

=item "0"

B<bpclock> terminated, for reasons noted in the B<ion.log> file.  If this
termination was not commanded, investigate and solve the problem identified
in the log file and use B<bpadmin> to restart B<bpclock>.

=item "1"

B<bpclock> was unable to attach to Bundle Protocol operations, probably because
B<bpadmin> has not yet been run.

=back

=head1 FILES

No configuration files are needed.

=head1 ENVIRONMENT

No environment variables apply.

=head1 DIAGNOSTICS

The following diagnostics may be issued to the B<ion.log> log file:

=over 4

=item bpclock can't attach to BP.

B<bpadmin> has not yet initialized BP operations.

=item Can't dispatch events.

An unrecoverable database error was encountered.  B<bpclock> terminates.

=item Can't adjust throttles.

An unrecoverable database error was encountered.  B<bpclock> terminates.

=back

=head1 BUGS

Report bugs to <https://github.com/nasa-jpl/ION-DTN/issues>

=head1 SEE ALSO

bpadmin(1), rfxclock(1)
