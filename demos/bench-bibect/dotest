#!/bin/bash
#
# Scott Burleigh
# February 6, 2019
#

# documentation boilerplate
CONFIGFILES=" \
./2.bench.bibe/bench.bprc \
./2.bench.bibe/bench.biberc \
./2.bench.bibe/bench.ionconfig \
./2.bench.bibe/bench.ionrc \
./2.bench.bibe/bench.ionsecrc \
./2.bench.bibe/bench.ipnrc \
./3.bench.bibe/bench.bprc \
./3.bench.bibe/bench.biberc \
./3.bench.bibe/bench.ionconfig \
./3.bench.bibe/bench.ionrc \
./3.bench.bibe/bench.ionsecrc \
./3.bench.bibe/bench.ipnrc \
./4.bench.bibe/bench.ionconfig \
./4.bench.bibe/bench.ionrc \
./4.bench.bibe/bench.ionsecrc \
./4.bench.bibe/bench.ipnrc \
"

echo "########################################"
echo
pwd | sed "s/\/.*\///" | xargs echo "NAME: "
echo
echo "PURPOSE: produce a demonstration configuration for using the 
	BIBE convergence-layer protocol (over UDP/IP) between neighboring 
	DTN nodes, relying on BIBE custodial retransmission for reliability; 
	bundles received via BIBE are forwarded to the final destination 
	by STCP. Since the bundle size exceeds the maximum capacity of a UDP
	packet, the test exercises BP fragmentation and reassembly as well.
	Due to the inherent unreliability of UDP and the fact the way network
	subsystem drops UDP data is implementation-dependent, the actual 
	throughput will vary from system to system. A final note is that the
	throughput is also a function of the size of the bundle."

echo
echo "CONFIG: 2 node custom:"
echo
for N in $CONFIGFILES
do
	echo "$N:"
	cat "$N"
	echo "# EOF"
	echo
done
echo "OUTPUT: Terminal messages will relay results."
echo
echo "########################################"
echo
echo "***PLEASE NOTE: this benchmark test requires Bundle Protocol version 7."

./cleanup
sleep 1

echo "Checking for additional memory needed for this demo..."
./check_memory 
if [ $? != 0 ]; then
	echo "Can't run, need additional system resources"
	exit 1
fi

echo "Starting ION..."
export ION_NODE_LIST_DIR=$PWD
rm -f ./ion_nodes
RETVAL=0

# Start nodes.
cd 2.bench.bibe
./ionstart >& bench.stdout
cd ../4.bench.bibe
./ionstart >& bench.stdout
cd ../3.bench.bibe
./ionstart >& bench.stdout

sleep 3
echo ""
echo "Test 1: 2000 bundles of 50,000 bytes each."
cd ../4.bench.bibe
bpcounter ipn:4.1 2000 &
BPCOUNTER_PID=$!
sleep 1

# if bpcounter didn't start, then something went wrong and we definitely haven't passsed!
# some ps don't like -p syntax, most do.
if [ "$1" == "windows" ]
then
		ps | grep "$BPCOUNTER_PID" >& /dev/null && RETURN_VALUE=1 || RETURN_VALUE=0
else
		ps $BPCOUNTER_PID >& /dev/null && RETURN_VALUE=1 || ps -p $BPCOUNTER_PID >& /dev/null && RETURN_VALUE=1 || RETURN_VALUE=0
fi
if [ "$RETURN_VALUE" -eq 0 ]
then
	echo "bpcounter couldn't be started."
	echo "...benchmarking terminated."
	exit 1
fi


cd ../2.bench.bibe
# send bundle under 64KB to avoid fragmentation
# over UDPCLO

COUNT=0

while [ $COUNT -le 2001 ]
do

   bptrace ipn:2.1 ipn:4.1 dtn:none 100 0.1.0.0.0.13 @testfile-50KB

   COUNT=$(($COUNT+1))

done

# Wait for transmission to finish.
echo "Waiting for transmission to finish..."
RUNNING=1
TIMER=0
while [ "$RUNNING" -eq 1 ]
do
	TIMER=$((++TIMER))
	sleep 1
	echo "...receiving..."
	# some ps don't like -p syntax, most do.
	if [ "$1" == "windows" ]
	then
		ps | grep "$BPCOUNTER_PID" >& /dev/null && RETURN_VALUE=1 || RETURN_VALUE=0
	else
		ps $BPCOUNTER_PID >& /dev/null && RETURN_VALUE=1 || ps -p $BPCOUNTER_PID >& /dev/null && RETURN_VALUE=1 || RETURN_VALUE=0
	fi
	if [ "$RETURN_VALUE" -eq 0 ]
	then
		echo "...transmission finished."
		RUNNING=0
	fi
	if [ "$TIMER" -gt 300 ]
	then
		#infinite loop protection
		echo "...5 minutes passed; giving up."
		RUNNING=0
		RETVAL=1
	fi
done

if [ "$RETVAL" -eq 1 ]
then
	echo "Test did not complete."
fi

echo "Waiting 150 sec for transmission to complete and fragments to expire..."

sleep 150

echo "...stopping ION..."
cd ../2.bench.bibe
bpstats
./ionstop &
cd ../3.bench.bibe
bpstats
./ionstop &
cd ../4.bench.bibe
bpstats
./ionstop &
sleep 5
killm
echo "...benchmarking terminated."
exit $RETVAL
